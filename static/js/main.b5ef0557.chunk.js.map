{"version":3,"sources":["components/Startpage/Startpage.module.scss","components/Sidebar/Sidebar.module.scss","components/Question/Question.module.scss","components/ProgressBar/ProgressBar.module.scss","components/CategorySelection/CategorySelection.module.scss","components/DifficultySelection/DifficultySelection.module.scss","components/QuestionsPage/QuestionsPage.module.scss","components/ShareCard/ShareCard.module.scss","assets/images/question-mark.svg","components/AmountSelection/AmountSelection.module.scss","components/NotAvailable/NotAvailable.module.scss","components/Finished/Finished.module.scss","Actions/types/questions.types.ts","util.tsx","components/ProgressBar/ProgressBar.tsx","components/ShareCard/ShareCard.tsx","components/Sidebar/Sidebar.tsx","components/Startpage/content/selection.content.ts","components/RadioToggle/RadioToggle.tsx","components/CategorySelection/CategorySelection.tsx","components/AmountSelection/AmountSelection.tsx","Actions/selection.action.ts","Actions/types/selection.types.ts","components/DifficultySelection/DifficultySelection.tsx","Actions/isSelectionSuccess.action.ts","Actions/questions.action.ts","components/Startpage/Startpage.tsx","components/Question/Question.tsx","Actions/score.action.ts","Actions/current.action.ts","components/NotAvailable/NotAvailable.tsx","Actions/fetchQuestionsThroughURL.action.ts","components/GoBackButton/GoBackButton.tsx","components/Finished/Finished.tsx","components/QuestionsPage/QuestionsPage.tsx","App.tsx","Reducers/test/test.reducer.ts","Actions/types/test.action.types.ts","Reducers/questions/questions.reducer.ts","Reducers/questions/selections.reducer.ts","Reducers/questions/isSelectionSuccess.reducer.ts","Reducers/questions/score.reducer.ts","Reducers/questions/current.reducer.ts","Reducers/questions/fetchQuestionsThroughURL.reducer.ts","Reducers/RootReducer.ts","Store.ts","index.tsx"],"names":["module","exports","Difficulty","SelectionType","getSelectionUrlParam","props","searchSplit","location","search","split","toString","final","i","length","splitByEqual","getAmountEnteredInSession","data","sessionStorage","getItem","JSON","parse","ProgressBar","totalNumberOfQuestions","amount","currentIndex","useSelector","state","currentIndexAtQuestion","className","styles","progressBar","current","style","width","total","ShareCard","shareCardContainer","icon","faTwitter","faFacebookF","faLink","Sidebar","next","visible","score","container","currentProgress","shareCard","onClick","e","categoriesContent","Items","value","name","difficultiesContent","RadioToggle","callback","items","useState","setState","keys","Object","height","marginRight","map","item","key","checked","type","onChange","target","currentTarget","handleClick","CategorySelection","categories","categoriesContainer","category","index","innerText","active","default","AmountSelection","placeholder","userQuestionTypeSelection","param","a","dispatch","payload","error","console","log","DifficultySelection","difficulty","notActive","isSelectionSuccess","result","SELECTION_SUCCEEDED","fetchQuestions","endpoint","selectionType","Axios","get","results","Startpage","useDispatch","questions","loading","isNotCompleted","setisNotCompleted","undefined","amountSelected","setAmountSelected","categorySelected","setCategorySelected","difficultySelected","setDifficultySelected","typeSelected","setTypeSelected","selectedChallenge","handleSubmitClick","params","isSuccess","query","useEffect","validateInputs","validate","selection","EASY","MEDIUM","HARD","types","typesContainer","MULTIPLE","BOOL","parseInt","setItem","stringify","button","disabled","to","pathname","contentImage","src","QuestionMarkImage","alt","sidebar","Question","answers","question","defaultIndex","setDefaultIndex","dangerouslySetInnerHTML","__html","choices","getAttribute","data-aria","ScoreAction","SAVE_SCORE_SUCCESS","CurrentAction","CURRENT_INDEX","NotAvailable","fetchQuestionsThroughURLAction","GoBackButton","link","Finished","currentScore","QuestionsPage","setData","setAnswers","setCurrentIndex","currentCorrectAnswer","setCurrentCorrectAnswer","isDone","setIsDone","setCurrentScore","sampleData","fetchQuestionsThroughURL","fetchAPI","fetchSelection","currentIndexDispatch","currentQuestion","mapAnswers","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","done","correct","checkUserAnswer","handleNext","prev","saveTheScore","mapDataQuestions","App","exact","path","component","initialState","testReducer","action","testTodos","QuestionsReducer","success","RootReducer","combineReducers","test","Store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.b5ef0557.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Startpage_container__3rrw7\",\"contentImage\":\"Startpage_contentImage__30D77\",\"selection\":\"Startpage_selection__3FLde\",\"categories\":\"Startpage_categories__3ov4o\",\"types\":\"Startpage_types__3Ag7q\",\"typesContainer\":\"Startpage_typesContainer__3JVeX\",\"amount\":\"Startpage_amount__2LdYR\",\"button\":\"Startpage_button__35cb7\",\"sidebar\":\"Startpage_sidebar__3L_Xl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Sidebar_container__1hpU0\",\"score\":\"Sidebar_score__iV_2S\",\"currentProgress\":\"Sidebar_currentProgress__2HCiw\",\"next\":\"Sidebar_next__7pk3_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Question_container__EiL89\",\"category\":\"Question_category__3HP2u\",\"choices\":\"Question_choices__3DAlK\",\"active\":\"Question_active__24dNp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progressBar\":\"ProgressBar_progressBar__2aJ_-\",\"current\":\"ProgressBar_current__NCPXJ\",\"total\":\"ProgressBar_total__1k7Vq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"categoriesContainer\":\"CategorySelection_categoriesContainer__3YvUO\",\"active\":\"CategorySelection_active__2yRnV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"difficulty\":\"DifficultySelection_difficulty__1Xd9F\",\"active\":\"DifficultySelection_active__3rQdH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"QuestionsPage_container__3kTVi\",\"question\":\"QuestionsPage_question__37IAR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"shareCardContainer\":\"ShareCard_shareCardContainer__hAaw5\"};","module.exports = __webpack_public_path__ + \"static/media/question-mark.76e11f1b.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AmountSelection_container__3icrV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NotAvailable_container__3OX5K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Finished_container__2Q4PG\"};","export const FETCH_QUESTIONS_FAIL = \"FETCH_QUESTIONS_FAIL\";\r\nexport const FETCH_QUESTIONS_LOADING = \"FETCH_QUESTIONS_LOADING\";\r\nexport const FETCH_QUESTIONS_SUCCESS = \"FETCH_QUESTIONS_SUCCESS\";\r\n\r\nexport interface Fetch_Questions_Fail {\r\n    type: typeof FETCH_QUESTIONS_FAIL\r\n}\r\n\r\nexport interface Fetch_Questions_Loading {\r\n    type: typeof FETCH_QUESTIONS_LOADING\r\n}\r\n\r\nexport interface Fetch_Questions_Success {\r\n    type: typeof FETCH_QUESTIONS_SUCCESS,\r\n    payload: Questions[];\r\n}\r\n\r\n// question types from the api\r\nexport type Questions = {\r\n    category: string,\r\n    correct_answer: string,\r\n    difficulty: Difficulty,\r\n    incorrect_answers: string[],\r\n    question: string,\r\n    type: string\r\n}\r\n\r\n// difficulty enums\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\"\r\n}\r\n\r\n// selection type\r\nexport enum SelectionType {\r\n    MULTIPLE = \"multiple\",\r\n    BOOL = \"boolean\"\r\n}\r\n\r\n// parameters passed in fetchQuestions Action\r\nexport interface QuestionsParams {\r\n    amount: number | undefined, \r\n    category: number | undefined, \r\n    difficulty: Difficulty | undefined, \r\n    selectionType: SelectionType | undefined\r\n}\r\n\r\nexport type FetchQuestionsDispatchTypes =  Fetch_Questions_Fail | Fetch_Questions_Loading | Fetch_Questions_Success;","import { QuestionsParams } from \"./Actions/types/questions.types\";\r\nimport { QuestionSessionStorage } from \"./components/QuestionsPage/QuestionsPage\";\r\n\r\nexport const QuestionSelectionValidation = (params: QuestionsParams): boolean => {\r\n    if(!params.amount || !params.category || !params.difficulty || !params.selectionType) {\r\n        return true //set is completed to be disabled\r\n    } return false //set is completed to enabled\r\n}\r\n\r\nexport const setQuestionInSession = (loading: boolean, questions: any): void => { // set the question in the session\r\n    const data: QuestionSessionStorage = {loading, questions}\r\n    sessionStorage.setItem('Questions', JSON.stringify(data))\r\n}\r\n\r\nexport const getQuestionInSession = () => { // Get the question in the session\r\n    const data: string | any = sessionStorage.getItem('Questions'); // assignment data need types\r\n    let result: QuestionSessionStorage = JSON.parse(data); // parsing data\r\n    return result\r\n}\r\n\r\nexport const checkUserAnswer = (value: string, correct: string | undefined) => { //Check user answer\r\n    if(value === correct) {\r\n        return true;\r\n    } return false;\r\n}\r\n\r\nexport const setScoreInSession = (score: number) => { // save the score to session\r\n    sessionStorage.setItem('Current Score', JSON.stringify(score));\r\n}\r\n\r\nexport const getScoreInSession = () => {\r\n    const data: number | any = sessionStorage.getItem('Current Score');\r\n    let result: number = JSON.parse(data);\r\n    return result\r\n}\r\n\r\n// get url selection\r\nexport const getSelectionUrlParam = (props: any) => {\r\n    let search = props.location.search.split(\"?\")[1].toString();\r\n    let searchSplit = search.split(\"&\") // split the url param by \"&\"\r\n\r\n    let final = []\r\n    for(var i=0; i< searchSplit.length; i++) {\r\n        const splitByEqual = searchSplit[i].split(\"=\"); //split the url param by \"=\"\r\n        final[i] = splitByEqual[1]\r\n    }\r\n    return final;\r\n}\r\n\r\n// set amount entered in session\r\nexport const setAmountEnteredInSession = (amount: number) => {\r\n    sessionStorage.setItem('Amount', JSON.stringify(amount))\r\n}\r\n\r\n// get the amount entered in session\r\nexport const getAmountEnteredInSession = () => {\r\n    const data: any = sessionStorage.getItem('Amount'); \r\n    const result = JSON.parse(data);\r\n    return result;\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { RootStore } from '../../Store';\r\nimport { getAmountEnteredInSession } from '../../util';\r\nimport styles from './ProgressBar.module.scss';\r\n\r\ninterface IAppProps {}\r\n\r\nconst ProgressBar: React.FC<IAppProps> = (): ReactElement => {\r\n    const amount = getAmountEnteredInSession();\r\n    const {currentIndex} = useSelector((state: RootStore) => state.currentIndexAtQuestion);\r\n    \r\n    const calculateWidthOfProgress = (totalNumberOfQuestions: number):number => {\r\n        let result = (currentIndex + 1) / totalNumberOfQuestions * 100 // calculating total percentage\r\n        return result\r\n    }\r\n\r\n    return (\r\n        <div className={styles.progressBar}>\r\n            <div className={styles.current} style={{width: `${calculateWidthOfProgress(amount)}%`}}></div>            \r\n            <div className={styles.total}></div>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTwitter, faFacebookF } from '@fortawesome/free-brands-svg-icons'\r\nimport { faLink } from '@fortawesome/free-solid-svg-icons'\r\nimport styles from './ShareCard.module.scss';\r\nconst ShareCard = () => {\r\n    return (\r\n        <ul className={styles.shareCardContainer}>\r\n            <li><FontAwesomeIcon icon={faTwitter} />Share on Twitter</li>\r\n            <li><FontAwesomeIcon icon={faFacebookF}/>Share on Facebook</li>\r\n            <li><FontAwesomeIcon icon={faLink}/>Copy link</li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default ShareCard\r\n","import React, { ReactElement } from 'react'\r\nimport styles from './Sidebar.module.scss'\r\nimport ProgressBar from '../ProgressBar/ProgressBar';\r\nimport ShareCard from '../ShareCard/ShareCard';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootStore } from '../../Store';\r\nimport { getAmountEnteredInSession } from '../../util';\r\n\r\ninterface ISidebarProps {\r\n    next?: Function,\r\n    visible?: boolean | undefined,\r\n    score?: number\r\n}\r\n\r\nconst Sidebar: React.FC<ISidebarProps> = (props): ReactElement => {\r\n    const { next, visible, score } = props;\r\n    const {currentIndex} = useSelector((state: RootStore) => state.currentIndexAtQuestion)\r\n    const amount = getAmountEnteredInSession();\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): null | void => {\r\n        if(!next) return;\r\n        next(); // call this callback function to handle next\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.score}>\r\n                <h4>Score</h4>\r\n                <h2>{score ? score : 0}</h2>\r\n            </div>\r\n            <div className={styles.currentProgress}>\r\n                <h4>{`${currentIndex + 1} out of ${amount}`}</h4>\r\n                <ProgressBar/>\r\n            </div>\r\n            <div className={styles.shareCard}>\r\n                <ShareCard/>\r\n            </div>\r\n            <div className={styles.next}>\r\n                <button className={visible ? \"primary-button\" : \"hide\"} onClick={e=>handleClick(e)}>\r\n                    Next Question\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","export const categoriesContent: string[] = [\r\n    \"General Knowledge\",\r\n    \"Entertainment: Books\",\r\n    \"Entertainment: Film\",\r\n    \"Entertainment: Music\",\r\n    \"Entertainment: Musicals & Theatres\",\r\n    \"Entertainment: Television\",\r\n    \"Entertainment: Video Games\",\r\n    \"Entertainment: Board Games\",\r\n    \"Science & Natures\",\r\n    \"Science: Computers\",\r\n    \"Science: Mathematics\",\r\n    \"Methodology\",\r\n    \"Sport\",\r\n    \"Geography\",\r\n    \"History\",\r\n    \"Politics\",\r\n    \"Art\",\r\n    \"Celibrities\",\r\n    \"Animals\",\r\n    \"Vehicles\",\r\n    \"Entertainment: Comics\",\r\n    \"Science: Gadgets\",\r\n    \"Entertainment: Japanese Anime & Manga\",\r\n    \"Entertainment: Cartoon & Animations\",\r\n]\r\n\r\nexport const Items = { //items for radio buttons {must have}\r\n    value: [\"multiple\", \"boolean\"],\r\n    name: [\"Multiple Choice\", \"True or False\"]\r\n}\r\n\r\nexport const difficultiesContent = [\r\n    \"easy\",\r\n    \"medium\",\r\n    \"hard\"\r\n]","import React, { ReactElement, useState } from 'react'\r\n\r\ninterface RadioToggleProps {\r\n    items: ItemsType,\r\n    callback: Function\r\n}\r\n\r\nexport type ItemsType = {\r\n    value: string[],\r\n    name: string[]\r\n}\r\n \r\nexport type INameRadioToggleProp = string;\r\n\r\nconst RadioToggle: React.FC<RadioToggleProps> = (props): ReactElement => {\r\n    const { callback, items: {value, name} } = props;\r\n    const [state, setState] = useState({})\r\n    const keys = Object.keys(state)[0]\r\n    \r\n    const handleClick = (e: React.MouseEvent<HTMLInputElement>) => {\r\n        const target: INameRadioToggleProp = e.currentTarget.value;\r\n        setState({\r\n            [target]: true\r\n        })\r\n    }\r\n\r\n    const styles = {\r\n        width: '20px',\r\n        height: '20px',\r\n        marginRight: '10px'\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {value.map((item, i)=> (\r\n            <label className=\"radio-container\" key={i}>\r\n                <input style={styles}\r\n                checked={keys === item ? true : false} \r\n                type=\"radio\" value={item} \r\n                onChange={e=>callback(e)} \r\n                onClick={e=>handleClick(e)}\r\n                />\r\n                {name[i]}\r\n                <span className=\"checkmark\"></span>\r\n            </label>\r\n        ))}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RadioToggle\r\n","import React, { ReactElement, useState } from 'react'\r\nimport styles from './CategorySelection.module.scss';\r\n\r\ninterface IAppProps {\r\n    categories: string[],\r\n    callback: Function\r\n}\r\n\r\nexport type IValueCategorySelectionProp = number;\r\n\r\nconst CategorySelection: React.FC<IAppProps> = (props): ReactElement => {\r\n    const { categories, callback } = props; \r\n    const [state, setState] = useState({})\r\n    const keys = Object.keys(state)[0];\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLLIElement, MouseEvent>) => {\r\n        const target = e.currentTarget.innerText;\r\n        callback(e);\r\n        setState({\r\n            [target]: true\r\n        })\r\n        \r\n    }\r\n\r\n    return (\r\n        <ul className={styles.categoriesContainer}>\r\n            {/* mapping all categories */}\r\n            {categories.map((category, index) => (\r\n                <li \r\n                    key={index}\r\n                    onClick={e=>handleClick(e)} \r\n                    value={index + 9}\r\n                    className={keys === category ? styles.active : styles.default}\r\n                >{category}\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default CategorySelection\r\n","import React, { ReactElement } from 'react'\r\nimport styles from './AmountSelection.module.scss'\r\n\r\ninterface IAppProps {\r\n    callback: Function\r\n}\r\n\r\nexport type IValueAmountSelectionProp = number;\r\n\r\nconst AmountSelection: React.FC<IAppProps> = (props): ReactElement => {\r\n    const { callback } = props;\r\n    return (\r\n        <div className={styles.container}>\r\n            <input onChange={e=>callback(e)} type=\"text\" placeholder=\"Amount\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AmountSelection\r\n","import { Dispatch } from \"react\";\r\nimport { SELECTION_FAIL, SELECTION_LOADING, SELECTION_SUCCESS, SelectionDispatchType } from \"./types/selection.types\";\r\nimport { QuestionsParams } from \"./types/questions.types\";\r\n\r\nexport const userQuestionTypeSelection = async (param: QuestionsParams) => (dispatch: Dispatch<SelectionDispatchType>) => {\r\n    try {\r\n        dispatch({\r\n            type: SELECTION_LOADING,\r\n        })        \r\n\r\n        // if success\r\n        dispatch({\r\n            type: SELECTION_SUCCESS,\r\n            payload: param\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: SELECTION_FAIL,\r\n        })\r\n        console.log(error)\r\n    }\r\n}","import { QuestionsParams } from \"./questions.types\";\r\n\r\nexport const SELECTION_LOADING = \"SELECTION_LOADING\";\r\nexport const SELECTION_SUCCESS = \"SELECTION_SUCCESS\";\r\nexport const SELECTION_FAIL = \"SELECTION_FAIL\";\r\n\r\ninterface Selection_Loading {\r\n    type: typeof SELECTION_LOADING,\r\n}\r\n\r\ninterface Selection_Success {\r\n    type: typeof SELECTION_SUCCESS,\r\n    payload: QuestionsParams\r\n}\r\n\r\ninterface Selection_Fail {\r\n    type: typeof SELECTION_FAIL,\r\n}\r\n\r\nexport type SelectionDispatchType = Selection_Loading | Selection_Success | Selection_Fail","import React, { ReactElement, useState } from 'react'\r\nimport styles from './DifficultySelection.module.scss'\r\n\r\ninterface IAppProps {\r\n    items: string[],\r\n    callback: Function\r\n}\r\n\r\nconst DifficultySelection: React.FC<IAppProps> = (props): ReactElement => {\r\n    const { items, callback } = props;\r\n    const [state, setState] = useState({});\r\n    const keys = Object.keys(state)[0];\r\n\r\n    const handleClick = (e: React.FormEvent<HTMLLIElement>) => {\r\n       const name = e.currentTarget.innerText;\r\n       callback(name);\r\n       setState({\r\n           [name]: true\r\n       })\r\n    }   \r\n\r\n    return (\r\n        <div className={styles.difficulty}>\r\n            <ul>\r\n                {\r\n                    items.map((item, i) => (\r\n                        <li \r\n                            key={i} \r\n                            \r\n                            onClick={e=> handleClick(e)} //passing event props to parent\r\n                            className={keys === item ? styles.active : styles.notActive}\r\n                        >{item}</li>\r\n                    ))\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DifficultySelection\r\n","import { Dispatch } from \"react\";\r\n\r\nexport const isSelectionSuccess =  async (result: boolean) => (dispatch: Dispatch<Selection_Succeeded>) => {\r\n    try {\r\n        dispatch({\r\n            type: SELECTION_SUCCEEDED,\r\n            payload: result            \r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const SELECTION_SUCCEEDED = 'SELECTION_SUCCEEDED';\r\nexport interface Selection_Succeeded {\r\n    type: typeof SELECTION_SUCCEEDED,\r\n    payload: boolean\r\n}","import { Dispatch } from 'redux';\r\nimport { FetchQuestionsDispatchTypes, FETCH_QUESTIONS_LOADING, FETCH_QUESTIONS_SUCCESS, FETCH_QUESTIONS_FAIL, QuestionsParams } from './types/questions.types';\r\nimport Axios from 'axios';\r\n\r\nexport const fetchQuestions = (param: QuestionsParams) => async (dispatch: Dispatch<FetchQuestionsDispatchTypes>) => {\r\n    try {\r\n       dispatch({\r\n           type: FETCH_QUESTIONS_LOADING\r\n       })\r\n\r\n        //done loading    \r\n       const endpoint = `https://opentdb.com/api.php?amount=${param.amount}&category=${param.category}&difficulty=${param.difficulty}&type=${param.selectionType}`\r\n       const { data: { results } } = await Axios.get(endpoint);\r\n       dispatch({\r\n           type: FETCH_QUESTIONS_SUCCESS,\r\n           payload: results\r\n       })\r\n\r\n    } catch (error) {\r\n        // fetching questions failed\r\n       dispatch({\r\n           type: FETCH_QUESTIONS_FAIL\r\n       }) \r\n       console.log(error)\r\n    }\r\n}","import React, { ReactElement, useState, useEffect } from 'react'\r\nimport styles from './Startpage.module.scss';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Sidebar from '../Sidebar/Sidebar';\r\n\r\n// contents\r\nimport { Items, categoriesContent, difficultiesContent } from './content/selection.content';\r\n\r\n// toggle component\r\nimport RadioToggle from '../RadioToggle/RadioToggle';\r\n\r\nimport QuestionMarkImage from '../../assets/images/question-mark.svg'\r\nimport CategorySelection, { IValueCategorySelectionProp } from '../CategorySelection/CategorySelection';\r\nimport AmountSelection, { IValueAmountSelectionProp } from '../AmountSelection/AmountSelection';\r\nimport { userQuestionTypeSelection } from '../../Actions/selection.action';\r\nimport { QuestionsParams, Difficulty, SelectionType } from '../../Actions/types/questions.types';\r\nimport DifficultySelection from '../DifficultySelection/DifficultySelection';\r\nimport { QuestionSelectionValidation, setAmountEnteredInSession, setQuestionInSession } from '../../util';\r\nimport { isSelectionSuccess } from '../../Actions/isSelectionSuccess.action';\r\nimport { fetchQuestions } from '../../Actions/questions.action';\r\nimport { RootStore } from '../../Store';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IAppProps {}\r\n\r\nconst Startpage: React.FC<IAppProps> = (): ReactElement => {\r\n    const dispatch = useDispatch();\r\n    const {questions,loading} = useSelector((state: RootStore) => state.questions)\r\n    const [isNotCompleted, setisNotCompleted] = useState(true) //Starting trivia\r\n\r\n    // 3 states for selection before starting trivia\r\n    const [amountSelected, setAmountSelected] = useState<IValueAmountSelectionProp | undefined>(undefined); // state for amount entered\r\n    const [categorySelected, setCategorySelected] = useState<IValueCategorySelectionProp | undefined>(undefined); // State for the number selected\r\n    const [difficultySelected, setDifficultySelected] = useState<Difficulty | undefined>(undefined) // state for selected difficulty\r\n    const [typeSelected, setTypeSelected] = useState<SelectionType | undefined>(undefined); // state for the type selected in radio\r\n    \r\n    const selectedChallenge: QuestionsParams = {\r\n        amount: amountSelected,\r\n        category: categorySelected,\r\n        difficulty: difficultySelected,\r\n        selectionType: typeSelected\r\n    }\r\n    \r\n    const amountEntered = (e: React.ChangeEvent<HTMLInputElement>) => { //callback for selecting amount\r\n        const target = e.currentTarget.value;\r\n        setAmountSelected(parseInt(target)) // set the amount selected in state\r\n        setAmountEnteredInSession(parseInt(target)) // set the amount in session\r\n    }\r\n    \r\n    const selectCategory = (e: React.MouseEvent<HTMLLIElement, MouseEvent>) => { //callback to selecting category\r\n        setCategorySelected(e.currentTarget.value);\r\n    }\r\n\r\n    const selectDifficulty = (e: string) => { //callback for selecting difficulty\r\n        const name = e;\r\n        if(name === 'easy') {\r\n            return setDifficultySelected(Difficulty.EASY)\r\n        } else if (name === 'medium') {\r\n            return setDifficultySelected(Difficulty.MEDIUM)\r\n        } else {\r\n            setDifficultySelected(Difficulty.HARD)\r\n        } \r\n     } \r\n    \r\n    const selectType = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const target = e.currentTarget.value; //this is the value selected in radio buttons\r\n    \r\n        if(target === 'multiple') {\r\n            return setTypeSelected(SelectionType.MULTIPLE)\r\n        } return setTypeSelected(SelectionType.BOOL)\r\n    }\r\n\r\n    // handling user select\r\n    const handleSubmitClick = async () => {\r\n        try {\r\n            // perform action\r\n            const params = await userQuestionTypeSelection(selectedChallenge)\r\n            dispatch(params)\r\n\r\n            // update isSelectionSuccess action to true\r\n            const isSuccess = await isSelectionSuccess(!isNotCompleted);\r\n            dispatch(isSuccess)\r\n\r\n            // fetch the question through the given params\r\n            const query = await fetchQuestions(selectedChallenge);\r\n            dispatch(query)\r\n            \r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // validate inputs\r\n        const validate = async () => {\r\n            try {\r\n                const validateInputs = await QuestionSelectionValidation(selectedChallenge);\r\n                setisNotCompleted(validateInputs);\r\n            } catch (error) {\r\n                setisNotCompleted(true)    \r\n                console.log(error)\r\n            }\r\n        }\r\n\r\n        validate()\r\n    }, [amountSelected, categorySelected, difficultySelected, typeSelected, selectedChallenge])\r\n\r\n    // storing questions to session\r\n    // useEffect(() => {\r\n    //     const setDataSession = async() => {\r\n    //         await setQuestionInSession(loading, questions);\r\n    //     }\r\n    //     setDataSession();\r\n    // }, [questions, loading]) // run this once we have questions\r\n\r\n    \r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {/* selection */}\r\n            <div className={styles.selection}>\r\n                \r\n                <div className={styles.categories}>\r\n                    <h2>Categories</h2>\r\n                    <div>\r\n                        <CategorySelection callback={selectCategory} categories={categoriesContent}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={styles.difficulty}>\r\n                    <DifficultySelection callback={selectDifficulty} items={difficultiesContent}/>\r\n                </div>\r\n                \r\n                <div className={styles.types}>\r\n                    <h2>Types</h2>\r\n                    <div className={styles.typesContainer}>\r\n                        {/* radio button toggle component */}\r\n                        <RadioToggle callback={selectType} items={Items}/>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.amount}>\r\n                    <h2>Number <br/>of Questions</h2>\r\n                    <AmountSelection callback={amountEntered}/>\r\n                </div>\r\n                <div className={styles.button}>\r\n                    <button disabled={isNotCompleted} onClick={handleSubmitClick} className=\"primary-button\">\r\n                        <Link to={{\r\n                            pathname: \"/quiz-app-2/questions\",\r\n                            search: `?amount=${amountSelected}&category=${categorySelected}&difficulty=${difficultySelected}&type=${typeSelected}`\r\n                        }}>Start trivia</Link>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Image */}\r\n            <div className={styles.contentImage}>\r\n                <img src={QuestionMarkImage} alt=\"undraw.co\"/>\r\n            </div>\r\n\r\n            {/* Sidebar */}\r\n            <div className={styles.sidebar}>\r\n                <Sidebar />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Startpage","import React, { useState } from 'react'\r\nimport styles from './Question.module.scss'\r\n\r\ninterface IQuestionAppProps {\r\n    category: string,\r\n    answers: string[],\r\n    question: string,\r\n    callback: Function\r\n}\r\n\r\nconst Question: React.FC<IQuestionAppProps> = (props) => {\r\n    const { category, answers, question, callback } = props;\r\n    const [state, setState] = useState<string | null>(null)\r\n    const [defaultIndex, setDefaultIndex] = useState<number | null>(0); // default selection index\r\n    \r\n    const handleClick = (e: React.MouseEvent<HTMLLIElement, MouseEvent>) => {\r\n        const value = e.currentTarget.getAttribute('data-aria'); //get the data attribute\r\n        setState(value)\r\n        setDefaultIndex(null); // once user clicked, turn off default selection\r\n        callback(value) // call the callback\r\n        //to pass value to parent\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <span className={styles.category}>{category}</span>\r\n            <h1 dangerouslySetInnerHTML={{__html: question}} /> \r\n            <ul className={styles.choices}>\r\n                {answers.map((item, index) => (\r\n                    <li className={item === state || index === defaultIndex ? styles.active : styles.default} key={index} onClick={e=>handleClick(e)} data-aria={item}>\r\n                        <span>{index === 0 ? 'A' : index === 1 ? 'B' : index === 2 ? 'C' : 'D'}</span>\r\n                        <p dangerouslySetInnerHTML={{__html: item}} />\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Question\r\n","import { Dispatch } from \"react\";\r\n\r\nexport const ScoreAction = async (score: number) => (dispatch: Dispatch<ScoreDispatchTypes>) => {\r\n    try {\r\n        dispatch({\r\n            type: SAVE_SCORE_SUCCESS,\r\n            payload: score // dispatch the score to the reducer\r\n        })\r\n    } catch (error) {\r\n            console.log(error)        \r\n    }\r\n}\r\n\r\nexport const SAVE_SCORE_SUCCESS = 'SAVE_SCORE_SUCCESS';\r\n\r\ninterface save_score_success {\r\n    type: typeof SAVE_SCORE_SUCCESS,\r\n    payload: number\r\n}\r\n\r\nexport type ScoreDispatchTypes = save_score_success","import { Dispatch } from \"react\";\r\n\r\n// use to determine current index of the question\r\nexport const CurrentAction = async(currentIndex: number) => (dispatch: Dispatch<CurrentIndexDispatchTypes>) => {\r\n    try {\r\n        dispatch({\r\n            type: CURRENT_INDEX,\r\n            payload: currentIndex\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const CURRENT_INDEX = \"CURRENT_INDEX\";\r\ninterface current_index {\r\n    type: typeof CURRENT_INDEX,\r\n    payload: number\r\n}\r\n\r\nexport type CurrentIndexDispatchTypes = current_index","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport styles from './NotAvailable.module.scss'\r\nconst NotAvailable = () => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <h2>There seems to be no<br/>Question this time :(</h2>\r\n            <div>\r\n                <button className=\"primary-button\" >\r\n                    <Link to=\"/quiz-app-2/selection\">Go back to selection</Link>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotAvailable\r\n","import Axios from \"axios\";\r\nimport { Dispatch } from \"react\";\r\n\r\nexport const fetchQuestionsThroughURLAction = (result: Array<string>) => async (dispatch: Dispatch<any>) => {\r\n    try {\r\n\r\n       const endpoint = `https://opentdb.com/api.php?amount=${result[0]}&category=${result[1]}&difficulty=${result[2]}&type=${result[3]}`\r\n       const { data: { results } } = await Axios.get(endpoint);\r\n\r\n        dispatch({\r\n            type: \"FETCH_QUESTIONS_THROUGH_URL\",\r\n            payload: results \r\n        })\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const FETCH_QUESTIONS_THROUGH_URL = \"FETCH_QUESTIONS_THROUGH_URL\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\ninterface IGoBackButtonProps {\r\n    link?: string\r\n}\r\n\r\nconst GoBackButton: React.FC<IGoBackButtonProps> = (props) => {\r\n    const { link } = props;\r\n    return (\r\n        <button className=\"primary-button\" >\r\n            <Link to={link ? link : \"/quiz-app-2/selection\"}>Go back to selection</Link>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default GoBackButton\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootStore } from '../../Store'\r\nimport GoBackButton from '../GoBackButton/GoBackButton'\r\nimport Sidebar from '../Sidebar/Sidebar'\r\nimport styles from './Finished.module.scss'\r\nconst Finished = () => {\r\n    const {score} = useSelector((state: RootStore) => state.currentScore)\r\n    // console.log(currentScore)\r\n    return (\r\n        <div className={styles.container}>\r\n            <div>\r\n                <h4>{score >= 5 ? \"Congrats!\" : \"Better luck next time!\"}\r\n                    <br/>You got <span>{score}</span></h4>\r\n                <GoBackButton/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Finished\r\n","import React, { useEffect, useState } from 'react'\r\nimport styles from './QuestionsPage.module.scss'\r\nimport Sidebar from '../Sidebar/Sidebar'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Questions } from '../../Actions/types/questions.types'\r\nimport { getQuestionInSession, checkUserAnswer, setScoreInSession, getSelectionUrlParam, getAmountEnteredInSession } from '../../util'\r\nimport Question from '../Question/Question';\r\nimport { ScoreAction } from '../../Actions/score.action'\r\nimport { CurrentAction } from '../../Actions/current.action'\r\nimport { RootStore } from '../../Store'\r\nimport NotAvailable from '../NotAvailable/NotAvailable'\r\nimport { faPray } from '@fortawesome/free-solid-svg-icons'\r\nimport { fetchQuestions } from '../../Actions/questions.action'\r\nimport { fetchQuestionsThroughURLAction } from '../../Actions/fetchQuestionsThroughURL.action'\r\nimport Finished from '../Finished/Finished'\r\n\r\nexport type QuestionSessionStorage = { //Session storage type used in setItem\r\n    loading: boolean,\r\n    questions?: Questions[]\r\n}\r\n\r\nconst QuestionsPage = (props: any) => {\r\n    const dispatch = useDispatch()\r\n    const [data, setData] = useState<QuestionSessionStorage | undefined>(undefined) // list of all data\r\n    const [answers, setAnswers] = useState<string[] | undefined>(undefined);\r\n    const [currentIndex, setCurrentIndex] = useState<number>(0); // means current number in the question\r\n    const [currentCorrectAnswer, setCurrentCorrectAnswer] = useState<string | undefined>(undefined)\r\n    const [isDone, setIsDone] = useState<boolean | undefined>(undefined);\r\n    const [currentScore, setCurrentScore] = useState<number>(0);\r\n    \r\n    const currentIndexAtQuestion = useSelector((state: RootStore) => state.currentIndexAtQuestion); // current index\r\n    const amount = getAmountEnteredInSession();\r\n\r\n    // test\r\n    const sampleData = useSelector((state: RootStore) => state.fetchQuestionsThroughURL)\r\n    \r\n    useEffect(() => { // for fetching session   \r\n        // fetch the questions in session\r\n        // const fetchSession = async() => {\r\n        //     const result = await getQuestionInSession();\r\n        //     setData(result) // set data of \r\n        // }\r\n        // fetchSession()\r\n\r\n        const fetchSelection = async() => {\r\n            const result = await getSelectionUrlParam(props);\r\n            //fetching API through search params by React Router\r\n            const fetchAPI = await fetchQuestionsThroughURLAction(result);\r\n            dispatch(fetchAPI); \r\n        }\r\n\r\n        fetchSelection();   \r\n        setData(sampleData); // set the data\r\n    }, [sampleData.loading])\r\n\r\n    useEffect(() => {\r\n       if(!data) return;\r\n       if(!data.questions) return;\r\n       const { questions } = data;\r\n\r\n       const currentIndexDispatch = async () => {\r\n            const result = await CurrentAction(currentIndex)\r\n            dispatch(result); // dispatching the current index\r\n        }\r\n\r\n        // !important, check if we have questions left\r\n       if(questions.length >= currentIndexAtQuestion.currentIndex) {\r\n           const currentQuestion = questions[currentIndex];\r\n           if(!currentQuestion) return;\r\n           mapAnswers(currentQuestion); // map all answers in question\r\n           currentIndexDispatch()  // add the current index to the store \r\n       } return;\r\n\r\n   }, [data, currentIndex, dispatch])\r\n   \r\n   if(!data) return null; // check if we have data\r\n\r\n   const mapDataQuestions: any = (current: number): JSX.Element | null => { // map all the question\r\n        if(!data.questions) return null; // check if it exist\r\n        const { questions } = data; \r\n        const currentQuestion = questions[current]; // get current question based on 'currentIndex'\r\n        \r\n        if(!currentQuestion || !answers) return null; \r\n\r\n        return <Question // call Question component and pass all the values\r\n                    category={currentQuestion.category} \r\n                    answers={answers}\r\n                    question={currentQuestion.question}\r\n                    callback={handleClick}\r\n                />\r\n   }\r\n   \r\n    const mapAnswers = (question: Questions): null | void => {\r\n        const correctAnswer = question.correct_answer;\r\n        const incorrectAnswers = question.incorrect_answers.map(item => item);\r\n        if(!question && !correctAnswer && incorrectAnswers) return;\r\n        else {\r\n            setAnswers([...incorrectAnswers, correctAnswer]); // copy all incorrect answers and add correct answer\r\n            setCurrentCorrectAnswer(correctAnswer); // set current correct answer for value checking\r\n        } \r\n    }\r\n\r\n    // when user chooses an answer\r\n    const handleClick = (value: string): void => { \r\n        const done = checkUserAnswer(value, currentCorrectAnswer); // call check user function in util \r\n        setIsDone(done); // user clicked next question button\r\n    }\r\n\r\n    // when user clicked next\r\n    const handleNext = async() => {\r\n        setCurrentIndex(prev => prev + 1); //Move on to the next question\r\n        if(!isDone) return; // double check whether user clicked next question\r\n        \r\n        setCurrentScore(prev => prev + 1); // add + 1 to the score since it is correct\r\n        const saveTheScore = await ScoreAction(currentScore);        \r\n        dispatch(saveTheScore) // dispatch the current score\r\n\r\n        // save score in session + 1\r\n        setScoreInSession(currentScore);\r\n    }\r\n\r\n    if(!data.questions) return null;\r\n    \r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.question}>\r\n                {/* Render questions */}\r\n                {!data.loading && data && data.questions && amount !== (currentIndex + 1) && mapDataQuestions(currentIndex)}\r\n\r\n                {/* Render NotAvailable */}\r\n                {!data.questions.length && <NotAvailable/>}\r\n\r\n                {/* Render Finished */}\r\n                {amount === currentIndex + 1 && <Finished/>}\r\n\r\n            </div>\r\n            {/* Visible props is checking whether we have questions available, if so, show button */}\r\n            <Sidebar next={handleNext} visible={data.questions ? true : false} score={currentScore}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuestionsPage","import React from 'react';\nimport './App.scss'\nimport { Startpage, QuestionsPage } from './components/index'\n\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport { RootStore } from './Store';\nimport { getAmountEnteredInSession, getQuestionInSession } from './util';\n\nimport Finished from './components/Finished/Finished';\nimport NotAvailable from './components/NotAvailable/NotAvailable';\n\nconst App = () => {\n  // const isSelectionSuccedded = useSelector((state: RootStore)=> state.isSelectionSuccess.success)\n  //const data = getQuestionInSession(); // use this to check whether we have answered questions\n  // const {currentIndex} = useSelector((state: RootStore) => state.currentIndexAtQuestion);\n  // const amount = getAmountEnteredInSession();\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Router>\n          <Switch>\n            <Route exact path={[\"/quiz-app-2\", \"/quiz-app-2/selection\"]} component={Startpage}/>\n            <Route exact path=\"/quiz-app-2/questions\" component={QuestionsPage}/>\n            \n          </Switch>  \n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { TestDispatchTypes, TEST_LOADING, testTodos, TEST_SUCCESS, TEST_FAIL } from \"../../Actions/types/test.action.types\"\r\n\r\n// interface or types is fine\r\ninterface InitialState {\r\n    loading: boolean,\r\n    testTodos?: testTodos[] // '?' means optional\r\n}\r\n\r\nconst initialState: InitialState = {\r\n    loading: false, \r\n    // don't need to write initial state\r\n    // because its '?'\r\n}\r\n\r\nconst testReducer = (state: InitialState = initialState, action: TestDispatchTypes) => {\r\n    switch(action.type) {\r\n        case TEST_FAIL: {\r\n            return {\r\n                loading: false\r\n            }\r\n        }\r\n        case TEST_LOADING : {\r\n            return {\r\n                loading: true\r\n            }\r\n        }\r\n        case TEST_SUCCESS: {\r\n            return {\r\n                loading: false,\r\n                testTodos: action.payload\r\n            }\r\n        }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default testReducer","export const TEST_LOADING = \"TEST_LOADING\";\r\nexport const TEST_FAIL = \"TEST_FAIL\";\r\nexport const TEST_SUCCESS = \"TEST_SUCCESS\";\r\n\r\n\r\n// use interface \"whenever possible\"\r\ninterface Test_Loading { \r\n    type: typeof TEST_LOADING // types for constant variables\r\n}\r\ninterface Test_Fail {\r\n    type: typeof TEST_FAIL // types for constant variables\r\n}\r\ninterface Test_Success {\r\n    type: typeof TEST_SUCCESS, // types for constant variables\r\n    payload: testTodos[]\r\n}\r\n\r\n\r\nexport type testTodos = { // types for the results\r\n    userId: number,\r\n    id: number,\r\n    title: string,\r\n    completed: boolean\r\n}\r\n\r\n\r\n// merge all dispatch types\r\nexport type TestDispatchTypes = Test_Loading | Test_Fail | Test_Success","import { Questions, FetchQuestionsDispatchTypes, FETCH_QUESTIONS_FAIL, FETCH_QUESTIONS_LOADING, FETCH_QUESTIONS_SUCCESS } from \"../../Actions/types/questions.types\";\r\n\r\nexport type QuestionsStateTypes = {\r\n    loading: boolean,\r\n    questions?: Questions[]\r\n}\r\n\r\nconst initialState: QuestionsStateTypes = {\r\n    loading: false,\r\n}\r\n\r\nconst QuestionsReducer = (state: QuestionsStateTypes = initialState, action: FetchQuestionsDispatchTypes) => {\r\n    switch(action.type) {\r\n        case FETCH_QUESTIONS_LOADING: {\r\n            return {\r\n                loading: true\r\n            }\r\n        }\r\n        case FETCH_QUESTIONS_SUCCESS: {\r\n            return {\r\n                loading: false,\r\n                questions: action.payload\r\n            }\r\n        }\r\n        case FETCH_QUESTIONS_FAIL: {\r\n            return {\r\n                loading: false\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default QuestionsReducer","import { Difficulty, SelectionType } from \"../../Actions/types/questions.types\";\r\nimport { SelectionDispatchType, SELECTION_FAIL, SELECTION_SUCCESS, SELECTION_LOADING } from \"../../Actions/types/selection.types\";\r\n\r\ninterface InitialState {\r\n    amount: number,\r\n    category: number,\r\n    difficulty: Difficulty,\r\n    type: SelectionType,\r\n    loading: boolean\r\n}\r\n\r\nconst initialState: InitialState = {\r\n    amount: 10,\r\n    category: 9,\r\n    difficulty: Difficulty.EASY,\r\n    type: SelectionType.MULTIPLE,\r\n    loading: false\r\n}\r\n\r\nexport const SelectionReducer = (state: InitialState = initialState, action: SelectionDispatchType) => {\r\n    switch(action.type) {\r\n        case SELECTION_LOADING: {\r\n            return {\r\n                loading: true\r\n            }\r\n        }\r\n        case SELECTION_SUCCESS: {\r\n            return {\r\n                state: action.payload,\r\n                loading: false\r\n            }\r\n        }\r\n        case SELECTION_FAIL: {\r\n            return {\r\n                \r\n                loading: false\r\n            }\r\n        }\r\n        default: \r\n            return state;\r\n    }\r\n}","import { Selection_Succeeded, SELECTION_SUCCEEDED } from \"../../Actions/isSelectionSuccess.action\"\r\n\r\ninterface InitialStateType {\r\n    success: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    success: false\r\n}\r\n\r\nexport const isSelectionSuccessReducer = (state: InitialStateType = initialState, action: Selection_Succeeded) => {\r\n    switch(action.type) {\r\n        case SELECTION_SUCCEEDED: {\r\n            return {\r\n                success: action.payload\r\n            }\r\n        }\r\n\r\n        default: \r\n            return state\r\n    }\r\n}","import { ScoreDispatchTypes, SAVE_SCORE_SUCCESS } from \"../../Actions/score.action\";\r\n\r\ninterface IScoreReducerState {\r\n    score: number\r\n}\r\n\r\nconst initialState: IScoreReducerState = {\r\n    score: 0\r\n}\r\n\r\nexport const scoreReducer = (state: IScoreReducerState = initialState, action: ScoreDispatchTypes) => {\r\n    switch(action.type) {\r\n        case SAVE_SCORE_SUCCESS: {\r\n            return {\r\n                score: action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import { CurrentIndexDispatchTypes, CURRENT_INDEX } from \"../../Actions/current.action\"\r\n\r\ninterface ICurrentReducerState {\r\n    currentIndex: number\r\n}\r\nconst initialState = {currentIndex: 0}\r\nexport const currentReducer = (state: ICurrentReducerState = initialState, action: CurrentIndexDispatchTypes) => {\r\n    switch(action.type) {\r\n        case CURRENT_INDEX: {\r\n            return {\r\n                currentIndex: action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} ","import { FETCH_QUESTIONS_THROUGH_URL } from \"../../Actions/fetchQuestionsThroughURL.action\"\r\n\r\ninterface InitialState {\r\n    questions: any,\r\n    loading: boolean | false\r\n}\r\nconst initialState = {\r\n    questions: [],\r\n    loading: true\r\n}\r\nexport const fetchQuestionsThroughURLReducer = (state: InitialState = initialState, action: any) => {\r\n    switch(action.type) {\r\n        case FETCH_QUESTIONS_THROUGH_URL: {\r\n            return {\r\n                loading: false,\r\n                questions: action.payload\r\n            }\r\n        }\r\n        default: \r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport testReducer from './test/test.reducer';\r\nimport QuestionsReducer from './questions/questions.reducer';\r\nimport { SelectionReducer } from './questions/selections.reducer';\r\nimport { isSelectionSuccessReducer } from './questions/isSelectionSuccess.reducer';\r\nimport { scoreReducer } from './questions/score.reducer';\r\nimport { currentReducer } from './questions/current.reducer';\r\nimport { fetchQuestionsThroughURLReducer } from './questions/fetchQuestionsThroughURL.reducer';\r\n\r\nconst RootReducer = combineReducers({\r\n    test: testReducer,\r\n    questions: QuestionsReducer,\r\n    selection: SelectionReducer,\r\n    isSelectionSuccess: isSelectionSuccessReducer,\r\n    currentScore: scoreReducer,\r\n    currentIndexAtQuestion: currentReducer,\r\n    fetchQuestionsThroughURL: fetchQuestionsThroughURLReducer\r\n})\r\n\r\nexport default RootReducer  ","import { createStore, applyMiddleware } from 'redux';\r\nimport RootReducer from './Reducers/RootReducer';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst Store = createStore(RootReducer, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\n// root reducer type\r\nexport type RootStore = ReturnType<typeof RootReducer>;\r\n\r\nexport default Store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport Store from './Store';\n\nReactDOM.render(\n  <Provider store={Store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}